with AUnit.Assertions; 
with Crypto.Types.Big_Numbers;
with Big_Number_Constants; 

pragma Elaborate_All(Crypto.Types.Big_Numbers);
package body Test.Big_Number_B_Div is

------------------------------------------------------------------------------------
-------------------------------- Type - Declaration --------------------------------
------------------------------------------------------------------------------------
	
   package Big is new Crypto.Types.Big_Numbers(4096);
   use Big;
   use Big.Utils;
   use Big.Binfield_Utils;
   use Big_Number_Constants;	

    X_4096, X_4095, X_3812, X_1025, X_1024, X_768, X_1, X_0: Big_Unsigned;
    N, X :  Big_Unsigned;
    
------------------------------------------------------------------------------------
------------------------------------ Constants -------------------------------------
------------------------------------------------------------------------------------

	procedure Results is
	begin
	   X_4096 := To_Big_Unsigned(Cons_4096);
	   X_4095 := To_Big_Unsigned(Cons_4095);
	   X_3812 := To_Big_Unsigned(Cons_3812);
	   X_1025 := To_Big_Unsigned(Cons_1025);
	   X_1024 := To_Big_Unsigned(Cons_1024);
	   X_768  := To_Big_Unsigned(Cons_768);
	   X_1 := To_Big_Unsigned("1");
	   X_0 := To_Big_Unsigned("0");
	end Results;

------------------------------------------------------------------------------------
---------------------------- Register Big_Number_Mod_Utils Tests ----------------------------
------------------------------------------------------------------------------------
	
	procedure Register_Tests(T : in out Big_Number_Test) is
		use Test_Cases.Registration;
	begin
		
		Register_Routine(T, Big_Number_Mod_Utils_Test1'Access,"B_Div with Modulo F = 2^4095.");
--		Register_Routine(T, Big_Number_Mod_Utils_Test2'Access,"B_Div with Modulo F = 2^3812.");
--		Register_Routine(T, Big_Number_Mod_Utils_Test3'Access,"B_Div with Modulo F = 2^2048.");
--		Register_Routine(T, Big_Number_Mod_Utils_Test4'Access,"B_Div with Modulo F = 2^1025.");
--		Register_Routine(T, Big_Number_Mod_Utils_Test5'Access,"B_Div with Modulo F = 2^1024.");
--		Register_Routine(T, Big_Number_Mod_Utils_Test6'Access,"B_Div with Modulo F = 2^768.");
--		Register_Routine(T, Big_Number_Mod_Utils_Test7'Access,"B_Div with Modulo F = 2^0.");

	end Register_Tests;

------------------------------------------------------------------------------------
------------------------------- Name Big_Number_Mod_Utils Test ------------------------------
------------------------------------------------------------------------------------

	function Name(T : Big_Number_Test) return Test_String is
	begin
		return new String'("Big_Number_Mod_Utils Test");
	end Name;

------------------------------------------------------------------------------------
------------------------------------ Start Tests -----------------------------------
------------------------------------------------------------------------------------
-------------------------------------- Test 1 --------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Mod_Utils_Test1(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
   	   
   	   Results;

   	   X := B_Div(X_4095, X_4096, X_4095);
   	   Assert(X = X_0, "Failed with 4095 and 4096 Bit.");

   	   X := B_Div(X_3812, X_4096, X_4095);
   	   Assert(X = X_0, "Failed with 3812 and 4096 Bit.");
   	   
   	   X := B_Div(X_768, X_4096, X_4095);
   	   Assert(X = X_0, "Failed with 768 and 4096 Bit.");
   	   
   	   X := B_Div(X_1024, X_3812, X_4095);
   	   Assert(X = X_0, "Failed with 1024 and 3812 Bit.");

   	   X := B_Div(X_1024, X_1025, X_4095);
   	   N := To_Big_Unsigned("522194440706576253345876355358312191289982124523" &
   	   "691890192116741641976953985778728424413405967498779170445053357219631" &
   	   "418993786719092896803631618043925682638972978488271854999170180795067" &
   	   "191859157214035005927973113188159419698856372836167342172293308748403" &
   	   "954352901852035642024370059304557233988891799014503340564685443208913" &
   	   "942023063828478183114446239128230287033182605145385910642487644820988" &
   	   "439748580358576316982664281628698495253102246635912758916794714001004" &
   	   "473988152710984326584744900350021960230534653002088287278508601667336" &
   	   "886360504605753732137614464478642033661677828741386274337133902646892" &
   	   "182456534552845356631196845913004712726899962874210927670850874773979" &
   	   "898932284050409535529528170670323123409355720489264092270376610229556" &
   	   "573390673196492480862907861615183876319372840102574079728497299173534" &
   	   "948081864128191297889026995186107317835343759107102835124998336340031" &
   	   "904870977341923598255821871805932154413804290823528496271229342221338" &
   	   "509117413441959456117410403364850270806875391588572341936821092280852" &
   	   "768335977293398766887209070448932671025391965390461609226125066279708" &
   	   "712869484972765270934487331435633642476248522006391240966968693487982" &
   	   "293539638928353974243830031785900087567257201147559247237943348396938" &
   	   "917912248320");
   	   Assert(X = N, "Failed with 1024 and 1025 Bit.");

   	   X := B_Div(X_768, X_1025, X_4095);
	   N := To_Big_Unsigned("305735770963298384420248023442748077715947901144" &
	   "632652038871779712717388388576139434286486584259101986696154788580253" &
	   "959460778755403670631327657559481632157825605732409534233483470973356" &
	   "413482586683903618745894870655566317354926495586778249282553223014208" &
	   "862145248651396407756956861432047959435395914309493742675157561410951" &
	   "095059924993423172917007854123815678840639177788896203921800964338199" &
	   "379702654884300314506796228956780834978353743950946822100357205078230" &
	   "230629540571313782384417031160268400278134446216357033073542919820204" &
	   "127114886264735111423610019724198789502516856395796400136630612590800" &
	   "400553202109537293350381498507127479426130965323412196644890531278086" &
	   "693246887906017846579173701805144633230286349435430605656517875552433" &
	   "112003824657101174434357677593579455592531553638852749666500407477760" &
	   "067880927005970928637481651836629373707771950646528399416874332732704" &
	   "785369667217675107677274008848037143288506216227389718903001654607815" &
	   "161830838062001852961969865475236664376772275015349393288415872377494" &
	   "564201926689779206221070884604584451530803503233912012847696088948978" &
	   "507822968842620201149269608766410827047141350181799293129467478335815" &
	   "6800");
   	   Assert(X = N, "Failed with 768 and 1025 Bit.");

   	   X := B_Div(X_1, X_1025, X_4095);
	   N := To_Big_Unsigned("290480299768497903142975126665228718534348758818" &
	   "144761833074307614360186549855511286866802226655920362566307887749025" &
	   "872199526479727002356083144283609351620051605581985322024942202492549" &
	   "452581360012238290352090619736484027001205241398829218469076114618060" &
	   "438952238494637161287586903848978440565478956275566654662175977689240" &
	   "815319079008093010012374628422407512125765222478859380206821436929049" &
	   "508627578696707312791518320295750043482186602660928341627264555395186" &
	   "141581706929979320334516297986259372358452977040250615510481950587537" &
	   "438000854768036711747287870813649742800665430847926497915233881850959" &
	   "079704426417253064293194913588172864744177331943977715580772322316509" &
	   "962719117000814602854537558776694408095949364779576576834935064613384" &
	   "273275871895789541157742231739013005144585901624769803752094974275690" &
	   "556348865373948453742852185535807506065796101227837962061950657645985" &
	   "5478234203189721457470807178553957231283664846848");
   	   Assert(X = N, "Failed with 1 and 1025 Bit.");

   	   X := B_Div(X_768, X_1024, X_4095);
   	   Assert(X = X_0, "Failed with 768 and 1024 Bit.");

   	   X := B_Div(X_1, X_1024, X_4095);
   	   Assert(X = X_0, "Failed with 1 and 1024 Bit.");

   	   X := B_Div(X_0, X_1024, X_4095);
   	   Assert(X = X_0, "Failed with 0 and 1024 Bit.");

   	   X := B_Div(X_1, X_768, X_4095);
   	   Assert(X = X_0, "Failed with 1 and 768 Bit.");

   	   X := B_Div(X_0, X_768, X_4095);
   	   Assert(X = X_0, "Failed with 0 and 768 Bit.");

   end Big_Number_Mod_Utils_Test1;
------------------------------------------------------------------------------------
-------------------------------------- Test 2 --------------------------------------
------------------------------------------------------------------------------------

--   procedure Big_Number_Mod_Utils_Test2(T : in out Test_Cases.Test_Case'Class) is
--      use AUnit.Assertions; 
--   begin
--
--   	   X := B_Div(X_768, X_3812, X_4095);
--   	   Assert(X = X_0, "Failed with 768 and 3812 Bit.");
--
--   	   X := B_Div(X_1025, X_2048, X_4095);
--   	   Assert(X = X_0, "Failed with 1025 and 2048 Bit.");
--   	   
--   	   X := B_Div(X_2048, X_1025, X_3812);
--	   N := To_Big_Unsigned("151571825294042936938158941333994041113534718188" &
--	   "078687570840823772425771794030291122438177522525246645954867130778908" &
--	   "590175778903797835946252526696111057923084285089653396239190346877471" &
--	   "034564076329520933209026663133261625557227293613223493246764562927162" &
--	   "477764434194725025939970580693076445979717837670897361312144190596345" &
--	   "221493943823910395328644272817846283531126799282995294369643199876699" &
--	   "417523983853243775981032927142757645580420843642055287726313454398510" &
--	   "614823508834529970699083437464478353251783454350832223974202050155593" &
--	   "862983893258940542593567867930655425811189154811013852368899817785120" &
--	   "247187320578796516079905009214776074727891566161308783381135311677826" &
--	   "431686106272484273764859462926220061955156995505580179788439944665432" &
--	   "104582195539663863083266427064043730803506015609935090435628339759858" &
--	   "662266672389463186767819471552297644186615358089189968274194401459273" &
--	   "268049609690262143620289589554457174868001217359361018326919378602361" &
--	   "580064099353527108136968388195876394346053703695103232124538189673760" &
--	   "924753144995169672671075200616250623419242226966660898392732865010647" &
--	   "08779387588198916155389427265845927018015967274276944903128563980");
--   	   Assert(X = N, "Failed with 2048 and 1025 Bit.");
--
--  	   X := B_Div(X_1025, X_2048, X_3812);
--  	   Assert(X = N, "Failed with 1025 and 2048 Bit.");
--
--  	   X := B_Div(X_1024, X_2048, X_3812);
--  	   N := B_Div(X_1024, X_2048, X_4095);
--  	   Assert(X = N, "Failed with 1024 and 2048 Bit.");
--
--  	   X := B_Div(X_768, X_2048, X_3812);
--  	   N := B_Div(X_768, X_2048, X_4095);
--  	   Assert(X = N, "Failed with 768 and 2048 Bit.");
--
--  	   X := B_Div(X_1, X_2048, X_4095);
--  	   N := B_Div(X_1, X_2048, X_4095);
--  	   Assert(X = N, "Failed with 768 and 3812 Bit.");
--
--   end Big_Number_Mod_Utils_Test2;
--	   
--------------------------------------------------------------------------------------
---------------------------------------- Test 3 --------------------------------------
--------------------------------------------------------------------------------------
--
--   procedure Big_Number_Mod_Utils_Test3(T : in out Test_Cases.Test_Case'Class) is
--      use AUnit.Assertions; 
--   begin
--   	   
--   	   X := B_Div(X_2048, X_4096, X_4095);
--	   N := To_Big_Unsigned("107723353571036691002382922295566506534813675565" &
--	   "718280107101151425082183796226302977324004705076378212295726536406326" &
--	   "731647065197168303070316960507954827610402102924557669986972500659167" &
--	   "965507022653525461280225227589307395475399187206126981128253901568605" &
--	   "486173454350142958586305136886028691841330413101285073047777965561141" &
--	   "402283249288548564982853920117754406860259352197770087309028201047167" &
--	   "528642880590389086478679061539524525327837174338819681345658710777624" &
--	   "104090418949036067365750523672423104411565595141935522326450153324227" &
--	   "843328794051750554631457785145340451444098682151061595349840493978519" &
--	   "51203686532076885");
--   	   Assert(X = N, "Failed with 2048 and 4096 Bit.");
--	   
--   end Big_Number_Mod_Utils_Test3;
--
--------------------------------------------------------------------------------------
---------------------------------------- Test 4 --------------------------------------
--------------------------------------------------------------------------------------
--
--   procedure Big_Number_Mod_Utils_Test4(T : in out Test_Cases.Test_Case'Class) is
--      use AUnit.Assertions; 
--   begin
--   	   
--   	   X := B_Div(X_1025, X_4096, X_4095);
--	   N := To_Big_Unsigned("522194440706576253345876355358312191289982124523" &
--	   "691890192116741641976953985778728424413405967498779170445053357219631" &
--	   "418993786719092896803631618043925682638972978488271854999170180795067" &
--	   "191859157214035005927973113188159419698856372836167342172293308748403" &
--	   "954352901852035642024370059304557233988891799014503343469488440893892" &
--	   "973452815095130470299789726716411734651513348221529512507986199933857" &
--	   "107770846917779942645743159118957217248367043905936319748237550094520" &
--	   "674504208530837546834166925275516486044134775384991808184705966507606" &
--	   "898412918594045916828375610659246423184062775112999150206172392431297" &
--	   "837246097308511903252956622805412865917690043804311051417135098849101" &
--	   "156584508839003337597742539960818209685142687562392007453579567729991" &
--	   "395256699805775897135553415567045292136442139895777424891477161767258" &
--	   "532611634530697452993846501061481697843891439474220308003706472837459" &
--	   "911525285821188577408160690315522951458068463353991658906878992359213" &
--	   "020371653979263250127435732299292624567964242001925081811445726516456" &
--	   "405422089068044421356688323225116614015296506663380339217802982285382" &
--	   "390835076354978032153217472946445086511819309405922900650673369220580" &
--	   "070026738096192767626173257735070979503220443623078238328817066997840" &
--	   "577352957952");
--   	   Assert(X = N, "Failed with 1025 and 4096 Bit.");
--
--   end Big_Number_Mod_Utils_Test4;
--
--------------------------------------------------------------------------------------
---------------------------------------- Test 5 --------------------------------------
--------------------------------------------------------------------------------------
--
--   procedure Big_Number_Mod_Utils_Test5(T : in out Test_Cases.Test_Case'Class) is
--      use AUnit.Assertions; 
--   begin
--   	   
--   	   X := B_Div(X_1024, X_4096, X_4095);
--	   N := To_Big_Unsigned("599231044954105302576435063596341577872658992980" &
--	   "768857578100270525775586018336543775694924408025120070400379599571311" &
--	   "192195965896048055408309491435464913747925892978082884950921007398670" &
--	   "820313731510276506950019229460502274474876271579710368469424123877835" &
--	   "03561528766079982415312826572101611785443208074712405");
--   	   Assert(X = N, "Failed with 1024 and 4096 Bit.");
--
--   end Big_Number_Mod_Utils_Test5;
--
--------------------------------------------------------------------------------------
---------------------------------------- Test 6 --------------------------------------
--------------------------------------------------------------------------------------
--
--   procedure Big_Number_Mod_Utils_Test6(T : in out Test_Cases.Test_Case'Class) is
--      use AUnit.Assertions; 
--   begin
--  	   
--   	   X := B_Div(X_1025, X_3812, X_4095);
--	   N := To_Big_Unsigned("202584285803568338381680610495729885973993894649" &
--	   "737747106131512206058204112152980265295150394554762277476944123932510" &
--	   "497838003890862530282380527532261085259002250215658249364914881162900" &
--	   "161461221485957108250586402480483486344438216559751743257785978706911" &
--	   "107111675347988784694896150434357213337436802424011877449538218640895" &
--	   "968298163687969642181215885623957409339801959594370227713175515574772" &
--	   "447321243609836469534453586046013887891868737464305159407832274101165" &
--	   "582778349182880920400725065057162104412424014065302761019998686755568" &
--	   "782964453327216823769202328803624822350898531045126415744084250260704" &
--	   "714038712526788109665100764963445913381930372102114116470110444980949" &
--	   "108744178306525416136567565811316860002733979704227495670713038197706" &
--	   "558349410615958998188715537894131630395900647697548830066031691048265" &
--	   "932864154352987072108177435600540951417426220451485549198802617912173" &
--	   "319994310050011614640384955458985263484315725873204253143803671542477" &
--	   "504010202337716045911269256269214827120989856256602016186482198745908" &
--	   "395020132429889799828492898095135732283797197638370106332671032479567" &
--	   "621313368053726507595374221684304234330406561712604480992308598692316" &
--	   "218721326734905382680250952565472135103952506330748345396959858608600" &
--	   "590879555584");
--   	   Assert(X = N, "Failed with 1025 and 3812 Bit.");
--
--   end Big_Number_Mod_Utils_Test6;
--
--------------------------------------------------------------------------------------
---------------------------------------- Test 7 --------------------------------------
--------------------------------------------------------------------------------------
--
--   procedure Big_Number_Mod_Utils_Test7(T : in out Test_Cases.Test_Case'Class) is
--      use AUnit.Assertions;
--   begin
--
--   	   X := B_Div(X_1024, X_2048, X_4095);
--	   N := To_Big_Unsigned("193653533178998602095316751110152479022899172545" &
--	   "429841222049538409573457699903674191244534817770613575044205258499350" &
--	   "581466350986484668237388762855739567746701070387990214683294801661699" &
--	   "635054240008158860234727079824322684667470160932552812312717409745373" &
--	   "625968158996424774191724602565985627043652637517044435364217116082460" &
--	   "300188890115773008276234948859281158616105803471655431633252028256259" &
--	   "765704668367356085570413516133899379184139096757588191248571290715181" &
--	   "323700108707742847019952525399159926502075449438887608088045407317736" &
--	   "871342031117421329882319564856378300132566785802365135558787060947054" &
--	   "306498819931984651709994069655087579427975971773751093907903633807959" &
--	   "948333558728099951339593060817211268212573923829556934895337027608924" &
--	   "863471131689550297076822068032238441784464224884689054206233911994286" &
--	   "059225061595013246089694528804337986185306013750030354371354430043165" &
--	   "4104387333669403416156394156129139060377319200085");
--   	   Assert(X = N, "Failed with 1024 and 2048 Bit.");
--
--   	   X := B_Div(X_768, X_2048, X_4095);
--	   N := To_Big_Unsigned("197002485098711534386612319459503436260326714561" &
--	   "519006541576288076725798351290288010362615278190309095561403801794700" &
--	   "855464082827413322390505686712097770849206007449642210336149327199079" &
--	   "507282024827361839101399421237887621528888982925824444217820018606520" &
--	   "506933515498906702644110930597594439050360795472393550536443939091558" &
--	   "112049329463220617051159653357714565913409688009776311605972509700620" &
--	   "155705861231078591174930650205071029232154705891031227930209873398650" &
--	   "751168756004456651942622876265540598375775868507901121394460817491845" &
--	   "916231407581094212347975465051327900335967679377180659108869500413641" &
--	   "715086318017037388192016182902064833751485780987495594274981327846343" &
--	   "711742369489583671147203447909803503011170943867310108816380389263299" &
--	   "888300435012071168500725047664484712440593138733437730487087717548724" &
--	   "63532596744552020974782661569120041297238");
--   	   Assert(X = N, "Failed with 768 and 2048 Bit.");
--
--   	   X := B_Div(X_1, X_2048, X_4095);
--   	   Assert(X = X_2048, "Failed with 1 and 2048 Bit.");
--   	   
--   end Big_Number_Mod_Utils_Test7;

----------------------------------------------------------------------------------

end Test.Big_Number_B_Div;
