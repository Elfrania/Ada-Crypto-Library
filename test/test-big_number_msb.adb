with AUnit.Assertions; 
with Crypto.Types.Big_Numbers;
with Big_Number_Constants; 

pragma Elaborate_All(Crypto.Types.Big_Numbers);
pragma Optimize(Time);

package body Test.Big_Number_MSB is

------------------------------------------------------------------------------------
-------------------------------- Type - Declaration --------------------------------
------------------------------------------------------------------------------------

	package Big is new Crypto.Types.Big_Numbers(4096);
    use Big;
    use Big.Utils;

	use Big_Number_Constants;
    
	X_4096, X_4095, X_3812, X_2048, X_1025, X_1024, X_768, X_582, X_1, X_0, P, Q, R, Z : 
	Big_Unsigned;

------------------------------------------------------------------------------------
------------------------------------ Constants -------------------------------------
------------------------------------------------------------------------------------

	procedure Constants is
	begin
	
		X_4096 := To_Big_Unsigned(Cons_4096);
		X_4095 := To_Big_Unsigned(Cons_4095);
		X_1025 := To_Big_Unsigned(Cons_1025);
		X_1024 := To_Big_Unsigned(Cons_1024);
		X_768  := To_Big_Unsigned(Cons_768);
		X_1 := To_Big_Unsigned("1");
		X_0 := To_Big_Unsigned("0");

	end Constants;

------------------------------------------------------------------------------------
---------------------------- Register Big Number Tests  ----------------------------
------------------------------------------------------------------------------------
	
	procedure Register_Tests(T : in out Big_Number_Test) is
		use Test_Cases.Registration;
	begin

		Register_Routine(T, Big_Number_Test1'Access,"Set most significant Bit");

	end Register_Tests;

------------------------------------------------------------------------------------
------------------------------- Name Big Number Tests ------------------------------
------------------------------------------------------------------------------------

	function Name(T : Big_Number_Test) return Test_String is
	begin
		return new String'("Big Number Tests");
	end Name;

------------------------------------------------------------------------------------
------------------------------------ Start Tests -----------------------------------
------------------------------------------------------------------------------------
-------------------------------------- Test 1 --------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Test1(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin

   	   Constants;
   	   P := Big_Unsigned_Last;
	   Set_Most_Significant_Bit(P);
	   Assert(P = Big_Unsigned_Last, "Failed with Big_Unsigned_Last Bit.");

	   P := To_Big_Unsigned("2#10011#");
	   Set_Most_Significant_Bit(P);
   	   Q := To_Big_Unsigned("52219444070657625334587635535831219128998212452369189" &
   	   "01921167416419769539857787284244134059674987791704450533572196314189937867" &
   	   "19092896803631618043925682638972978488271854999170180795067191859157214035" &
   	   "00592797311318815941969885637283616734217229330874840395435290185203564202" &
   	   "43700593045572339888917990145033434694884408938929734528150951304702997897" &
   	   "26716411734651513348221529512507986199933857107770846917779942645743159118" &
   	   "95721724836704390593631974823755009452067450420853083754683416692527551648" &
   	   "60441347753849918081847059665076068984129185940459168283756106592464231840" &
   	   "62775112999150206172392431297837246097308511903252956622805412865917690043" &
   	   "80431105141713509884910115658450883900333759774253996081820968514268756239" &
   	   "20074535795677299913952566998057758971355534155670452921364421398957774248" &
   	   "91477161767258532611634530697452993846501061481697843891439474220308003706" &
   	   "47283745991152528582118857740816069031552295145806846335417142822036522394" &
   	   "99859508907328817366119251336265299498979980453997346008873124088592249337" &
   	   "27829625089164535236559716582775403784110923285873186648442456409760158728" &
   	   "50122046330845543707419253920596490226149092866948882405156304295150065120" &
   	   "6733594863336608245755565801460390869016718045121902354170201577095187");
	   Assert(P = Q, "Failed with 5 Bit.");
	   
	   P := X_1024;
	   Set_Most_Significant_Bit(P);
   	   Q := To_Big_Unsigned("52219444070657625334587635535831219128998212452369189" &
   	   "01921167416419769539857787284244134059674987791704450533572196314189937867" &
   	   "19092896803631618043925682638972978488271854999170180795067191859157214035" &
   	   "00592797311318815941969885637283616734217229330874840395435290185203564202" &
   	   "43700593045572339888917990145033434694884408938929734528150951304702997897" &
   	   "26716411734651513348221529512507986199933857107770846917779942645743159118" &
   	   "95721724836704390593631974823755009452067450420853083754683416692527551648" &
   	   "60441347753849918081847059665076068984129185940459168283756106592464231840" &
   	   "62775112999150206172392431297837246097308511903252956622805412865917690043" &
   	   "80431105141713509884910115658450883900333759774253996081820968514268756239" &
   	   "20074535795677299913952566998057758971355534155670452921364421398957774248" &
   	   "91477161767258532611634530697452993846501061481697843891439474220308003706" &
   	   "47283745991152528582118857740816069031552295145806846335435119753385145554" &
   	   "07588814098117842099737228315207606071714281265574672766928133719919334110" &
   	   "50237161110284649116431109940434193552925339908366034079081930534137926621" &
   	   "92608594858475765667543863332541798521357593443832697473390550583297456431" &
   	   "7274422100499958756440152099700338114955197761426737710499825801232383");
	   Assert(P = Q, "Failed with 1024 Bit.");
	   
	   P := X_1025;
	   Set_Most_Significant_Bit(P);
   	   Q := To_Big_Unsigned("52219444070657625334587635535831219128998212452369189" &
   	   "01921167416419769539857787284244134059674987791704450533572196314189937867" &
   	   "19092896803631618043925682638972978488271854999170180795067191859157214035" &
   	   "00592797311318815941969885637283616734217229330874840395435290185203564202" &
   	   "43700593045572339888917990145033434694884408938929734528150951304702997897" &
   	   "26716411734651513348221529512507986199933857107770846917779942645743159118" &
   	   "95721724836704390593631974823755009452067450420853083754683416692527551648" &
   	   "60441347753849918081847059665076068984129185940459168283756106592464231840" &
   	   "62775112999150206172392431297837246097308511903252956622805412865917690043" &
   	   "80431105141713509884910115658450883900333759774253996081820968514268756239" &
   	   "20074535795677299913952566998057758971355534155670452921364421398957774248" &
   	   "91477161767258532611634530697452993846501061481697843891439474220308003706" &
   	   "47283745991152528582118857740816069031552295145806846335435119753385145554" &
   	   "07588814098117842099737228315207606071714281265574672766928133719919334110" &
   	   "50237161110284649116431109940434193552925339908366034079081930534137926621" &
   	   "92608594858475765667543863332541798521357593443832697473390550583297456431" &
   	   "7274422100499958756440152099700338114955197761426737710499825801232384");
	   Assert(P = Q, "Failed with 1025 Bit.");
	   
	   P := X_768;
	   Set_Most_Significant_Bit(P);
	   Q := To_Big_Unsigned("52219444070657625334587635535831219128998212452369189" &
	   "01921167416419769539857787284244134059674987791704450533572196314189937867" &
	   "19092896803631618043925682638972978488271854999170180795067191859157214035" &
	   "00592797311318815941969885637283616734217229330874840395435290185203564202" &
	   "43700593045572339888917990145033434694884408938929734528150951304702997897" &
	   "26716411734651513348221529512507986199933857107770846917779942645743159118" &
	   "95721724836704390593631974823755009452067450420853083754683416692527551648" &
	   "60441347753849918081847059665076068984129185940459168283756106592464231840" &
	   "62775112999150206172392431297837246097308511903252956622805412865917690043" &
	   "80431105141713509884910115658450883900333759774253996081820968514268756239" &
	   "20074535795677299913952566998057758971355534155670452921364421398957774248" &
	   "91477161767258532611634530697452993846501061481697843891439474220308003706" &
	   "47283745991152528582118857740816069031552295145806846335417142822036522394" &
	   "99859508907328817366119251336265299498979980453997346008873134613773172345" &
	   "08742367999619792122576833279386542836148949336825873025328787288168987374" &
	   "97917095103915256814739982267312290667297116346232339199443579326431204325" &
	   "1283317071821958512110256499932973395305841416768780247016855393153018");
	   Assert(P = Q, "Failed with 768 Bit.");
	   
	   P := X_1;
	   Set_Most_Significant_Bit(P);
   	   Q := To_Big_Unsigned("52219444070657625334587635535831219128998212452369189" &
   	   "01921167416419769539857787284244134059674987791704450533572196314189937867" &
   	   "19092896803631618043925682638972978488271854999170180795067191859157214035" &
   	   "00592797311318815941969885637283616734217229330874840395435290185203564202" &
   	   "43700593045572339888917990145033434694884408938929734528150951304702997897" &
   	   "26716411734651513348221529512507986199933857107770846917779942645743159118" &
   	   "95721724836704390593631974823755009452067450420853083754683416692527551648" &
   	   "60441347753849918081847059665076068984129185940459168283756106592464231840" &
   	   "62775112999150206172392431297837246097308511903252956622805412865917690043" &
   	   "80431105141713509884910115658450883900333759774253996081820968514268756239" &
   	   "20074535795677299913952566998057758971355534155670452921364421398957774248" &
   	   "91477161767258532611634530697452993846501061481697843891439474220308003706" &
   	   "47283745991152528582118857740816069031552295145806846335417142822036522394" &
   	   "99859508907328817366119251336265299498979980453997346008873124088592249337" &
   	   "27829625089164535236559716582775403784110923285873186648442456409760158728" &
   	   "50122046330845543707419253920596490226149092866948882405156304295150065120" &
   	   "6733594863336608245755565801460390869016718045121902354170201577095169");
	   Assert(P = Q, "Failed with 1 Bit.");
	   
	   P := X_0;
	   Set_Most_Significant_Bit(P);
	   Assert(P = X_4095, "Failed with 0 Bit.");
	   
   end Big_Number_Test1;

------------------------------------------------------------------------------------

end Test.Big_Number_MSB;
