with AUnit.Assertions; 
with Crypto.Types.Big_Numbers;
with Big_Number_Constants; 
with Big_Numbers_Mod_Utils; 
with Ada.Text_IO; 

pragma Elaborate_All(Crypto.Types.Big_Numbers);
  
  package body Test.Big_Number_B_Mult is

------------------------------------------------------------------------------------
-------------------------------- Type - Declaration --------------------------------
------------------------------------------------------------------------------------
	
	package Big is new Crypto.Types.Big_Numbers(4096);
    use Big;
    use Big.Utils;
    use Big.Binfield_Utils;
	
	use Ada.Text_IO;
	use Big_Number_Constants;	
	use Big_Numbers_Mod_Utils; 

    X_4096, X_4095, X_3812, X_2048, X_1025, X_1024, X_768, X_582, X_1, X_0: Big_Unsigned;
	A, N, X, Result:  Big_Unsigned;
	
------------------------------------------------------------------------------------
------------------------------------ Constants -------------------------------------
------------------------------------------------------------------------------------

	procedure Results is
	begin
	
		X_4096 := To_Big_Unsigned(Cons_4096);
		X_4095 := To_Big_Unsigned(Cons_4095);
		X_3812 := To_Big_Unsigned(Cons_3812);
		X_2048 := To_Big_Unsigned(Cons_2048);
		X_1025 := To_Big_Unsigned(Cons_1025);
		X_1024 := To_Big_Unsigned(Cons_1024);
		X_768  := To_Big_Unsigned(Cons_768);
		X_582  := To_Big_Unsigned(Cons_582);
		X_1 := To_Big_Unsigned("1");
		X_0 := To_Big_Unsigned("0");
		
	end Results;

------------------------------------------------------------------------------------
---------------------------- Register Big_Number_Mod_Utils Tests ----------------------------
------------------------------------------------------------------------------------
	
	procedure Register_Tests(T : in out Big_Number_Test) is
		use Test_Cases.Registration;
	begin
		
		Register_Routine(T, Big_Number_Mod_Utils_Test1'Access,"B_Mult with Modulo F = 2^4095.");
		Register_Routine(T, Big_Number_Mod_Utils_Test2'Access,"B_Mult with Modulo F = 2^3812.");
		Register_Routine(T, Big_Number_Mod_Utils_Test3'Access,"B_Mult with Modulo F = 2^2048.");
		Register_Routine(T, Big_Number_Mod_Utils_Test4'Access,"B_Mult with Modulo F = 2^1025.");
		Register_Routine(T, Big_Number_Mod_Utils_Test5'Access,"B_Mult with Modulo F = 2^1024.");
		Register_Routine(T, Big_Number_Mod_Utils_Test6'Access,"B_Mult with Modulo F = 2^768.");
		Register_Routine(T, Big_Number_Mod_Utils_Test7'Access,"B_Mult with Modulo F = 2^0.");

	end Register_Tests;

------------------------------------------------------------------------------------
------------------------------- Name Big_Number_Mod_Utils Test ------------------------------
------------------------------------------------------------------------------------

	function Name(T : Big_Number_Test) return Test_String is
	begin
		return new String'("Big_Number_Mod_Utils Test");
	end Name;

------------------------------------------------------------------------------------
------------------------------------ Start Tests -----------------------------------
------------------------------------------------------------------------------------
-------------------------------------- Test 1 --------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Mod_Utils_Test1(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
   	   
   	   Results;

   	   X := B_Mult(X_4095, X_4096, X_4095);
   	   Assert(X = X_0, "Failed with 4095 and 4096 Bit.");

   	   X := B_Mult(X_3812, X_4096, X_4095);
	   N := To_Big_Unsigned("150001779147990786420672978913096489076147631655" &
	   "723119406050537961170130661866873827114080780427562757328483510437066" &
	   "853597536350325677342143407699451970433652460691214375435368092560291" &
	   "661308999886967044515194482263227481596521357010548802927056041080282" &
	   "764004421101342239981005124472798296181634894417127358254241219059922" &
	   "407610974266785063541449921399519057861134450684753483628037681461763" &
	   "463011506780292838083175949786695729859690157173255941327614530520240" &
	   "413550582020160860881762710303125840583810447810003158880920233103319" &
	   "576406801515374042661275445702816335806044932798502516229670487956516" &
	   "903903151120218838539646454380600966445571654240498960589859205211931" &
	   "287173525450768788095725891500870577733663388560881585785000208614805" &
	   "500810651095851435905880523251706715560869105775587682850762046486736" &
	   "431882393231486755952843447279189143188083834769938531539599574136715" &
	   "478885901972915439292069502813299308410547010548868671066298980663307" &
	   "280110537793446980779754141928629066855627258506018836716002366933314" &
	   "674608271714480519499467457359479525984599069921772126433105034063826" &
	   "82189756835620067469476203990168312529883556899961145167213232128");
   	   Assert(X = N, "Failed with 3812 and 4096 Bit.");
   	   
   	   X := B_Mult(X_768, X_4096, X_4095);
	   N := To_Big_Unsigned("609593861089743312236893981176648951727915986406" &
	   "423755777602660807779598814281175660304359037012115999045017380964877" &
	   "690563423997791173738666352421007849014358992554277957067530325239528" &
	   "270025083928263961403849717993457404655035734");
   	   Assert(X = N, "Failed with 768 and 4096 Bit.");
   	   
   	   X := B_Mult(X_1024, X_3812, X_4095);
	   N := To_Big_Unsigned("454494025493143218217838244812853887337763367471" &
	   "588324308665424394180058627498018704420613636721718584523944309645158" &
	   "118372493736141766886422233641509005783191733206209683344009493653279" &
	   "211956713011522504883380017887591160412178731121389142901490210322619" &
	   "071504845362708220236896537223510896646589211770723920062235750330475" &
	   "153670549374711129638014764546079362912691471981608772664777127102964" &
	   "640689476937970355850767164250321183580494410435392917434353038964819" &
	   "617268490438520519818707910497427495909155105782091160825549920176793" &
	   "035619851563288889189840016246689953600890378433684960410806382025127" &
	   "305520881065150728304092308726030577973886363591692774263397611164868" &
	   "011427272245391314595015970972945958345993829925247595409594653966794" &
	   "330843633265440497819954503891794105953800000386344215475216337023595" &
	   "423074291791604681324379900487497847597395865743793401395650911557792" &
	   "555276417684824345207353386439695796077542233511740262179027242409722" &
	   "363159796769262765635319590880618886227082304695332510371003208689945" &
	   "775690572349289668141506205885493067073223682621424358802062105832528" &
	   "461321297611136090314170795201449988808139417426106762341802063871293" &
	   "013384830806901759090775681716674200954479499168877508515193288912085" &
	   "655920574464");
   	   Assert(X = N, "Failed with 1024 and 3812 Bit.");

   	   X := B_Mult(X_1024, X_1025, X_4095);
	   N := X_2048 - X_1024;
   	   Assert(X = N, "Failed with 1024 and 1025 Bit.");

   	   X := B_Mult(X_768, X_1025, X_4095);
	   N := To_Big_Unsigned("189210454884749520384004775028663025435798325550" &
	   "608087802368412054548947837275812071430863935349662110700738762836492" &
	   "700566961828889097893630389625614239169265549120778167494363053272464" &
	   "955230367248512581734862396397966417749520103880711174881480712596783" &
	   "261767725712987549089398165640716286916638441843481480204034415166675" &
	   "961193304035751598179038724590495142965476422970202891015187406179576" &
	   "566825247349966581917888723342466006533143540766497150709791814721665" &
	   "091402831350592698306611093214446046076668630957013584633404153995382" &
	   "593945600");
   	   Assert(X = N, "Failed with 768 and 1025 Bit.");

   	   X := B_Mult(X_1, X_1025, X_4095);
   	   Assert(X = X_1025, "Failed with 1 and 1025 Bit.");

   	   X := B_Mult(X_768, X_1024, X_4095);
	   N := To_Big_Unsigned("109586269913524379390249647130180198113440104150" &
	   "768136473939680208457162975868072894001097894919171553932543934595590" &
	   "627558642101035381939835246338852035440358097956313653894652784191761" &
	   "966566132536028681790585828939119737470123942811638518435423487557053" &
	   "745611253615296529226759914301259605894185270067490973277286581378611" &
	   "217751031853450281462356037534825300238784810908679249030944380601494" &
	   "659661245171467891711897793517730337924865440868456468400997323451835" &
	   "762113484251115454205453793355308427169937547131189700006989690206570" &
	   "454312278");
   	   Assert(X = N, "Failed with 768 and 1024 Bit.");

   	   X := B_Mult(X_1, X_1024, X_4095);
   	   Assert(X = X_1024, "Failed with 1 and 1024 Bit.");

   	   X := B_Mult(X_0, X_1024, X_4095);
   	   Assert(X = X_0, "Failed with 0 and 1024 Bit.");

   	   X := B_Mult(X_1, X_768, X_4095);
   	   Assert(X = X_768, "Failed with 1 and 768 Bit.");

   	   X := B_Mult(X_0, X_768, X_4095);
   	   Assert(X = X_0, "Failed with 0 and 768 Bit.");

   end Big_Number_Mod_Utils_Test1;
------------------------------------------------------------------------------------
-------------------------------------- Test 2 --------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Mod_Utils_Test2(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin

   	   X := B_Mult(X_768, X_3812, X_4095);
	   N := To_Big_Unsigned("445779765189692064091146383051907482685678011871" &
	   "228957789336830967959556155551204537227155580597587091165684488995261" &
	   "854455948265546067674928220395257246932505962623690374588907641012572" &
	   "320920885279272434972178269097910108000737165253238569148087642775631" &
	   "714117123009920287628153350562987798313911900836660566281965349758171" &
	   "120579942628377845465384900325281423653871669414048109017879197732706" &
	   "177089441068714974394442347385440482350009969192620798785537101510957" &
	   "384994490170982039515812112026787036486438417074829121033292546581010" &
	   "514930807523031743554276094049847536427377040427024297883553925493930" &
	   "219183938197393831855954905060435027643442412464574286078647505503163" &
	   "121367304024887236374519928026464065702727864954990965228812887524011" &
	   "130070129352634237359309041189722755701926273723003048557932000056965" &
	   "139776513040427304480234391163552205024050149348836749220517453661271" &
	   "963317344719623948838646343966015248247725607820876820808352392010321" &
	   "207279982665987731394729173403285712758011682784775896481693921499084" &
	   "487431684216656800151041665193302852042186013006150218531701907040886" &
	   "324664202209535945629738689324369433849611549177057303721322160065798" &
	   "859665077578259644809866841371884504292163322940411384281358245034165" &
	   "936567877632");
   	   Assert(X = N, "Failed with 768 and 3812 Bit.");

   	   X := B_Mult(X_1025, X_2048, X_4095);
	   N := To_Big_Unsigned("580960599536995806285950253330457437068697517636" &
	   "289523666148615228720373099711022573733604453311840725132615775498051" &
	   "744399052959454004712166288567218703240103211163970644049884404985098" &
	   "905162720024476580704181239472968054002410482797658436938152229236120" &
	   "877904476989274322575173807697956881130957912551133309324351955378481" &
	   "630638158016186020024749256844815024251530444957718760413642873858099" &
	   "017255157393414625583036640591500086964373205321856683254529110790372" &
	   "283163413859958640669032595972518744716905954080501231020963901175074" &
	   "876001709536073423494575741627299485601330861695852995830467763701918" &
	   "159408852834506110609458478553186652195302755997708094981774855209954" &
	   "198095225885855938128525021240117968459657975957041142281882989891002" &
	   "667574862349916833030741399530613572512382460762991079873967988426771" &
	   "700752422452688406908820556003380765843444811144621841400184980240902" &
	   "6370170166432196976461898052272558132943105556480");
   	   Assert(X = N, "Failed with 1025 and 2048 Bit.");
   	   
   	   X := B_Mult(X_2048, X_3812, X_3812);
   	   Assert(X = X_0, "Failed with 2048 and 3812 Bit.");

  	   X := B_Mult(X_1025, X_2048, X_3812);
  	   N := B_Mult(X_1025, X_2048, X_4095);
  	   Assert(X = N, "Failed with 1025 and 2048 Bit.");

  	   X := B_Mult(X_1024, X_2048, X_3812);
  	   N := B_Mult(X_1024, X_2048, X_4095);
  	   Assert(X = N, "Failed with 1024 and 2048 Bit.");

  	   X := B_Mult(X_768, X_2048, X_3812);
  	   N := B_Mult(X_768, X_2048, X_4095);
  	   Assert(X = N, "Failed with 768 and 2048 Bit.");

  	   X := B_Mult(X_1, X_2048, X_4095);
  	   N := B_Mult(X_1, X_2048, X_4095);
  	   Assert(X = N, "Failed with 768 and 3812 Bit.");

   end Big_Number_Mod_Utils_Test2;
	   
------------------------------------------------------------------------------------
-------------------------------------- Test 3 --------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Mod_Utils_Test3(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
   	   
   	   X := B_Mult(X_2048, X_4096, X_4095);
	   N := To_Big_Unsigned("107723353571036691002382922295566506534813675565" &
	   "718280107101151425082183796226302977324004705076378212295726536406326" &
	   "731647065197168303070316960507954827610402102924557669986972500659167" &
	   "965507022653525461280225227589307395475399187206126981128253901568605" &
	   "486173454350142958586305136886028691841330413101285073047777965561141" &
	   "402283249288548564982853920117754406860259352197770087309028201047167" &
	   "528642880590389086478679061539524525327837174338819681345658710777624" &
	   "104090418949036067365750523672423104411565595141935522326450153324227" &
	   "843328794051750554631457785145340451444098682151061595349840493978519" &
	   "51203686532076885");
   	   Assert(X = N, "Failed with 2048 and 4096 Bit.");
	   
   end Big_Number_Mod_Utils_Test3;

------------------------------------------------------------------------------------
-------------------------------------- Test 4 --------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Mod_Utils_Test4(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
   	   
   	   X := B_Mult(X_1025, X_4096, X_4095);
	   N := To_Big_Unsigned("522194440706576253345876355358312191289982124523" &
	   "691890192116741641976953985778728424413405967498779170445053357219631" &
	   "418993786719092896803631618043925682638972978488271854999170180795067" &
	   "191859157214035005927973113188159419698856372836167342172293308748403" &
	   "954352901852035642024370059304557233988891799014503343469488440893892" &
	   "973452815095130470299789726716411734651513348221529512507986199933857" &
	   "107770846917779942645743159118957217248367043905936319748237550094520" &
	   "674504208530837546834166925275516486044134775384991808184705966507606" &
	   "898412918594045916828375610659246423184062775112999150206172392431297" &
	   "837246097308511903252956622805412865917690043804311051417135098849101" &
	   "156584508839003337597742539960818209685142687562392007453579567729991" &
	   "395256699805775897135553415567045292136442139895777424891477161767258" &
	   "532611634530697452993846501061481697843891439474220308003706472837459" &
	   "911525285821188577408160690315522951458068463353991658906878992359213" &
	   "020371653979263250127435732299292624567964242001925081811445726516456" &
	   "405422089068044421356688323225116614015296506663380339217802982285382" &
	   "390835076354978032153217472946445086511819309405922900650673369220580" &
	   "070026738096192767626173257735070979503220443623078238328817066997840" &
	   "577352957952");
   	   Assert(X = N, "Failed with 1025 and 4096 Bit.");

   end Big_Number_Mod_Utils_Test4;

------------------------------------------------------------------------------------
-------------------------------------- Test 5 --------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Mod_Utils_Test5(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
   	   
   	   X := B_Mult(X_1024, X_4096, X_4095);
	   N := To_Big_Unsigned("599231044954105302576435063596341577872658992980" &
	   "768857578100270525775586018336543775694924408025120070400379599571311" &
	   "192195965896048055408309491435464913747925892978082884950921007398670" &
	   "820313731510276506950019229460502274474876271579710368469424123877835" &
	   "03561528766079982415312826572101611785443208074712405");
   	   Assert(X = N, "Failed with 1024 and 4096 Bit.");

   end Big_Number_Mod_Utils_Test5;

------------------------------------------------------------------------------------
-------------------------------------- Test 6 --------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Mod_Utils_Test6(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions; 
   begin
  	   
   	   X := B_Mult(X_1025, X_3812, X_4095);
	   N := To_Big_Unsigned("202584285803568338381680610495729885973993894649" &
	   "737747106131512206058204112152980265295150394554762277476944123932510" &
	   "497838003890862530282380527532261085259002250215658249364914881162900" &
	   "161461221485957108250586402480483486344438216559751743257785978706911" &
	   "107111675347988784694896150434357213337436802424011877449538218640895" &
	   "968298163687969642181215885623957409339801959594370227713175515574772" &
	   "447321243609836469534453586046013887891868737464305159407832274101165" &
	   "582778349182880920400725065057162104412424014065302761019998686755568" &
	   "782964453327216823769202328803624822350898531045126415744084250260704" &
	   "714038712526788109665100764963445913381930372102114116470110444980949" &
	   "108744178306525416136567565811316860002733979704227495670713038197706" &
	   "558349410615958998188715537894131630395900647697548830066031691048265" &
	   "932864154352987072108177435600540951417426220451485549198802617912173" &
	   "319994310050011614640384955458985263484315725873204253143803671542477" &
	   "504010202337716045911269256269214827120989856256602016186482198745908" &
	   "395020132429889799828492898095135732283797197638370106332671032479567" &
	   "621313368053726507595374221684304234330406561712604480992308598692316" &
	   "218721326734905382680250952565472135103952506330748345396959858608600" &
	   "590879555584");
   	   Assert(X = N, "Failed with 1025 and 3812 Bit.");

   end Big_Number_Mod_Utils_Test6;

------------------------------------------------------------------------------------
-------------------------------------- Test 7 --------------------------------------
------------------------------------------------------------------------------------

   procedure Big_Number_Mod_Utils_Test7(T : in out Test_Cases.Test_Case'Class) is
      use AUnit.Assertions;
   begin

   	   X := B_Mult(X_1024, X_2048, X_4095);
	   N := To_Big_Unsigned("193653533178998602095316751110152479022899172545" &
	   "429841222049538409573457699903674191244534817770613575044205258499350" &
	   "581466350986484668237388762855739567746701070387990214683294801661699" &
	   "635054240008158860234727079824322684667470160932552812312717409745373" &
	   "625968158996424774191724602565985627043652637517044435364217116082460" &
	   "300188890115773008276234948859281158616105803471655431633252028256259" &
	   "765704668367356085570413516133899379184139096757588191248571290715181" &
	   "323700108707742847019952525399159926502075449438887608088045407317736" &
	   "871342031117421329882319564856378300132566785802365135558787060947054" &
	   "306498819931984651709994069655087579427975971773751093907903633807959" &
	   "948333558728099951339593060817211268212573923829556934895337027608924" &
	   "863471131689550297076822068032238441784464224884689054206233911994286" &
	   "059225061595013246089694528804337986185306013750030354371354430043165" &
	   "4104387333669403416156394156129139060377319200085");
   	   Assert(X = N, "Failed with 1024 and 2048 Bit.");

   	   X := B_Mult(X_768, X_2048, X_4095);
	   N := To_Big_Unsigned("197002485098711534386612319459503436260326714561" &
	   "519006541576288076725798351290288010362615278190309095561403801794700" &
	   "855464082827413322390505686712097770849206007449642210336149327199079" &
	   "507282024827361839101399421237887621528888982925824444217820018606520" &
	   "506933515498906702644110930597594439050360795472393550536443939091558" &
	   "112049329463220617051159653357714565913409688009776311605972509700620" &
	   "155705861231078591174930650205071029232154705891031227930209873398650" &
	   "751168756004456651942622876265540598375775868507901121394460817491845" &
	   "916231407581094212347975465051327900335967679377180659108869500413641" &
	   "715086318017037388192016182902064833751485780987495594274981327846343" &
	   "711742369489583671147203447909803503011170943867310108816380389263299" &
	   "888300435012071168500725047664484712440593138733437730487087717548724" &
	   "63532596744552020974782661569120041297238");
   	   Assert(X = N, "Failed with 768 and 2048 Bit.");

   	   X := B_Mult(X_1, X_2048, X_4095);
   	   Assert(X = X_2048, "Failed with 1 and 2048 Bit.");
   	   
   end Big_Number_Mod_Utils_Test7;

----------------------------------------------------------------------------------

end Test.Big_Number_B_Mult;
